#include <stdio.h>
#include <stdlib.h>
 
struct Node
{
    int data;
    struct Node *next;
};
 
void linkedListTraversal(struct Node *ptr)
{
    while (ptr != NULL)
    {
        printf("Element 1: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 2: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 3: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 4: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 5: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 6: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 7: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 8: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 9: %d\n", ptr->data);
        ptr = ptr->next;
        printf("Element 10: %d\n", ptr->data);
        ptr = ptr->next;
    }
}
 
int main()
{
    struct Node *head;
    struct Node *second;
    struct Node *third;
    struct Node *fourth;
    struct Node *fifth;
    struct Node *sixth;
    struct Node *seventh;
    struct Node *eighth;
    struct Node *ninth;
    struct Node *tenth;
 
    // Allocate memory for nodes in the linked list in Heap
    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));
    fifth = (struct Node *)malloc(sizeof(struct Node));
    sixth = (struct Node *)malloc(sizeof(struct Node));
    seventh = (struct Node *)malloc(sizeof(struct Node));
    eighth = (struct Node *)malloc(sizeof(struct Node));
    ninth = (struct Node *)malloc(sizeof(struct Node));
    tenth = (struct Node *)malloc(sizeof(struct Node));


    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Link fourth and fifth nodes
    fourth->data = 66;
    fourth->next = fifth;

    // Link fifth and sixth nodes
    fifth->data = 86;
    fifth->next = sixth;

    //Link sixth and seventh nodes
    sixth->data = 106;
    sixth->next = seventh;

    //Link seventh and eighth nodes
    seventh->data = 126;
    seventh->next = eighth;

    //Link eighth and ninth nodes
    eighth->data = 166;
    eighth->next = ninth;

    //Link ninth and tenth nodes
    ninth->data = 178;
    ninth->next = tenth;

    //Terminate the tenth nodes
    tenth->data = 210;
    tenth->next = NULL;
 
    linkedListTraversal(head);
    return 0;
}
